name: Deployment

on:
  workflow_dispatch: # This pipeline is triggered manually.

jobs:
  build_test_deploy:
    runs-on: ubuntu-latest
    permissions: # Allows CodeQL to access the resources it requires.
      contents: read
      security-events: write

    steps:
    - name: Configure AWS Credentials # Configures AWS credentials using GitHub secrets' environmental variables. 
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
  
    - name: Checkout Code # Copies the code from the repository in which the action pipeline has been invoked.
      uses: actions/checkout@v3

    - name: Initialize CodeQL # Initialises CodeQL to scan C# code.
      uses: github/codeql-action/init@v3
      with:
        languages: 'csharp'

    - name: Send Start Email # Sends an email to the mailing list in the ToAddresses field, alerting members of the list to the start of the pipeline.
      run: |
        aws ses send-email --from "d.hayesacademy23@gmail.com" --destination "ToAddresses=d.hayesacademy23@gmail.com" \
        --message "Subject={Data=Deployment Started,Charset=utf8},Body={Text={Data=Deployment process has started for the main branch.,Charset=utf8}}"

    - name: Set Up .NET Core # Sets up the .NET environment of the specified version on the runner.
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x'


    - name: Restore Dependencies # Connects to NuGet and downloads and installs the projets's dependencies.
      run: dotnet restore

    - name: SonarCloud Scan # Scans the code with SonarCloud
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=DHayes23_FairwayManager-GitHubActions
          -Dsonar.organization=dhayes23
          -Dsonar.qualitygate.wait=true

    - name: Build # Compiles the project. (Doesn't restore dependencies as this is handled in an earlier stage)
      run: dotnet build --no-restore -c Release
      
    - name: Perform CodeQL Analysis # Analyses the code using CodeQL.
      uses: github/codeql-action/analyze@v3
      
    - name: Run Tests # Runs .NET tests
      run: dotnet test --no-build -c Release --verbosity normal

    - name: Publish Application # Prepares the application for deployment by adding all of its files and dependencies to a folder.
      run: dotnet publish -r win-x64 --self-contained -c Release -o ./publish

    - name: Zip the Publish Folder for Elastic Beanstalk # Zips the published folder, making it suitable for deployment to AWS Elastic Beanstalk.
      run: zip -j deploy.zip ./publish/*

    - name: Deploy to AWS Elastic Beanstalk # Uses an external action to deploy the application in the zipped folder to AWS Elastic Beanstalk.
      uses: einaregilsson/beanstalk-deploy@v18
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: FairwayManager2
        environment_name: FairwayManager2-env-win-2
        version_label: prod-${{ github.run_number }}
        region: ${{ secrets.AWS_REGION }}
        deployment_package: deploy.zip
        wait_for_environment_recovery: 600

    - name: Send Success Email # Sends an email to the mailing list in the ToAddresses field, notifying members of the successful completion of the pipeline.
      if: success()
      run: |
        if ! aws ses send-email --from "d.hayesacademy23@gmail.com" --destination "ToAddresses=d.hayesacademy23@gmail.com" \
        --message "Subject={Data=Deployment Successful,Charset=utf8},Body={Text={Data=Deployment to production was successful.,Charset=utf8}}"; then
          echo "Failed to send success notification email."
          exit 1
        fi

    - name: Send Failure Email # NOTE: This stage will not trigger under normal circumstances, as the individual stages handle fail independently. Sends an email to the mailing list in the ToAddresses field, alerting members to the failure of the pipeline.
      if: failure()
      run: |
        if ! aws ses send-email --from "d.hayesacademy23@gmail.com" --destination "ToAddresses=d.hayesacademy23@gmail.com" \
        --message "Subject={Data=Deployment Failed,Charset=utf8},Body={Text={Data=Please see the pipeline logs for further details.,Charset=utf8}}"; then
          echo "Failed to send failure notification email."
          exit 1
        fi
