name: Deployment

on:
  workflow_dispatch: # This pipeline is triggered manually.

jobs:
  build_test_deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Configure AWS Credentials # Configures AWS credentials using GitHub secrets' environmental variables. 
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
  
    - name: Checkout Code # Copies the code from the repository in which the action pipeline has been invoked.
      uses: actions/checkout@v3
      continue-on-error: true
      id: checkout
    - name: Check Checkout Status # Outputs a message to the console if the code checkout fails.
      if: steps.checkout.outcome == 'failure'
      run: | # This and all subsequent echo commands will cause the termination of the pipeline. This will allow for quick identification of the stage of the pipeline that is failing.
        echo "Failed to checkout the code. Please check repository settings or network issues."
        exit 1

    - name: Send Start Email # Sends an email to the mailing list in the ToAddresses field, alerting members of the list to the start of the pipeline.
      run: |
        aws ses send-email --from "d.hayesacademy23@gmail.com" --destination "ToAddresses=d.hayesacademy23@gmail.com" \
        --message "Subject={Data=Deployment Started,Charset=utf8},Body={Text={Data=Deployment process has started for the main branch.,Charset=utf8}}"
      continue-on-error: true
      id: start-email
    - name: Check Start Email Status # Outputs a message to the console if the start email fails to send.
      if: steps.start-email.outcome == 'failure'
      run: |
        echo "Failed to send start email. Check AWS SES configuration and credentials."
        exit 1

    - name: Set Up .NET Core # Sets up the .NET environment of the specified version on the runner.
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x'
      continue-on-error: true
      id: setup-dotnet
    - name: Check .NET Setup Status # Outputs a message to the console if the .NET environment setup fails.
      if: steps.setup-dotnet.outcome == 'failure'
      run: |
        echo "Failed to set up .NET environment. Check the specified .NET version and runner capabilities."
        exit 1

    - name: Restore Dependencies # Connects to NuGet and downloads and installs the projets's dependencies.
      run: dotnet restore
      continue-on-error: true
      id: restore-deps
    - name: Check Restore Dependencies Status # Outputs a message to the console if the dependencies don't download/install.
      if: steps.restore-deps.outcome == 'failure'
      run: |
        echo "Failed to restore dependencies. Check the project's configuration and network issues."
        exit 1

    - name: SonarCloud Scan # Scans the code with SonarCloud
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=DHayes23_FairwayManager-GitHubActions
          -Dsonar.organization=dhayes23
          -Dsonar.qualitygate.wait=true


    - name: Build # Compiles the project. (Doesn't restore dependencies as this is handled in an earlier stage)
      run: dotnet build --no-restore -c Release
      continue-on-error: true
      id: build
    - name: Check Build Status # Outputs a message to the console if the code doesn't compile.
      if: steps.build.outcome == 'failure'
      run: |
        echo "Build failed. Please check compilation errors."
        exit 1

    - name: Run Tests # Runs .NET tests
      run: dotnet test --no-build -c Release --verbosity normal
      continue-on-error: true
      id: tests
    - name: Check Test Status # Outputs a message to the console if the .NET tests fail.
      if: steps.tests.outcome == 'failure'
      run: |
        echo "Tests failed. Check test results for details."
        exit 1

    # - name: Scan for Vulnerabilities # Scans the code's dependencies for 'High Level' vulnerabilities.
    #   uses: snyk/actions/dotnet-core@master
    #   with:
    #     command: test
    #     args: '--severity-threshold=high'
    #     snyk_token: ${{ secrets.SNYK_TOKEN }}
    #   continue-on-error: true
    #   id: security-scan
    # - name: Check Security Scan Status # Outputs a message to the console if high level vulnerabilities are discovered in the dependencies.
    #   if: steps.security-scan.outcome == 'failure'
    #   run: |
    #     echo "Security vulnerabilities detected. Review and address them before deploying."
    #     exit 1

    - name: Publish Application # Prepares the application for deployment by adding all of its files and dependencies to a folder.
      run: dotnet publish -c Release -o ./publish
      continue-on-error: true
      id: publish
    - name: Check Publish Status # Outputs a message to the console if publishing fails.
      if: steps.publish.outcome == 'failure'
      run: |
        echo "Publishing failed. Please check if there are issues with the project's configuration."
        exit 1

    - name: Zip the Publish Folder for Elastic Beanstalk # Uses an external action to zip the published folder, making it suitable for deployment to AWS Elastic Beanstalk.
      uses: montudor/action-zip@v0.1.1
      with:
        args: zip -r deploy.zip ./publish
      continue-on-error: true
      id: zip
    - name: Check Zip Status # Outputs a message to the console if the zipping of the folder fails.
      if: steps.zip.outcome == 'failure'
      run: |
        echo "Zipping the published output failed. Check the file paths and permissions."
        exit 1

    - name: Deploy to AWS Elastic Beanstalk # Uses an external action to deploy the application in the zipped folder to AWS Elastic Beanstalk.
        uses: einaregilsson/beanstalk-deploy@v18
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: FairwayManager2
          environment_name: FairwayManager2-env
          version_label: prod-${{ github.run_number }}
          region: ${{ secrets.AWS_REGION }}
          deployment_package: path/to/your/deployment/package.zip
      continue-on-error: true
      id: deploy
    - name: Check Deploy Status # Outputs a message to the console if the deployment fails.
      if: steps.deploy.outcome == 'failure'
      run: |
        echo "Deployment failed. Check AWS configurations and logs."
        exit 1

    - name: Send Success Email # Sends an email to the mailing list in the ToAddresses field, notifying members of the successful completion of the pipeline.
      if: success()
      run: |
        if ! aws ses send-email --from "d.hayesacademy23@gmail.com" --destination "ToAddresses=d.hayesacademy23@gmail.com" \
        --message "Subject={Data=Deployment Successful,Charset=utf8},Body={Text={Data=Deployment to production was successful.,Charset=utf8}}"; then
          echo "Failed to send success notification email."
          exit 1
        fi

    - name: Send Failure Email # NOTE: This stage will not trigger under normal circumstances, as the individual stages handle fail independently. Sends an email to the mailing list in the ToAddresses field, alerting members to the failure of the pipeline.
      if: failure()
      run: |
        if ! aws ses send-email --from "d.hayesacademy23@gmail.com" --destination "ToAddresses=d.hayesacademy23@gmail.com" \
        --message "Subject={Data=Deployment Failed,Charset=utf8},Body={Text={Data=Please see the pipeline logs for further details.,Charset=utf8}}"; then
          echo "Failed to send failure notification email."
          exit 1
        fi
